filter {
  if [type] == "cassandra" {
    multiline {
      patterns_dir => "/etc/logstash/patterns"
      pattern => "%{CASSANDRA_ERROR_STACK}"
      what => "previous"
    }
    
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => {"message" => "%{CASSANDRA_LOG_LEVEL:log_level} %{CASSANDRA_STAGE:stage} %{TIMESTAMP_ISO8601:log_stamp} %{CASSANDRA_JAVA_CLASS:java_class} %{CASSANDRA_JAVA_CLASS_LINE:line_number} (?<log_message>(.+\n?)+)"}
    }
    
    if [java_class] == "Memtable.java" and [stage] =~ /(\[FlushWriter:)\d+/ {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => {"log_message" => "%{CASSANDRA_FLUSHED_BYTES:flushed_bytes:float}"}
        add_tag => ["FlushWriterEnd"]
        add_field => {"unique_thread_id" => "%{host}:%{stage}"}
        tag_on_failure => []
      }
      
      if "FlushWriterEnd" not in [tags] {
        grok {
          patterns_dir => "/etc/logstash/patterns"
          match => {"log_message" => "%{CASSANDRA_FLUSHED_INFOS}"}
          add_tag => ["FlushWriterStart"]
          add_field => {"unique_thread_id" => "%{host}:%{stage}"}
          tag_on_failure => ["flush_grok_parse_failure"]
        }
      }
      
      mutate {
        convert => [
          "flushed_live_bytes", "float",
          "flushed_serial_bytes", "float",
          "flushed_ops", "float"
        ]
      }
      
      elapsed {
        start_tag => "FlushWriterStart"
        end_tag => "FlushWriterEnd"
        unique_id_field => "unique_thread_id"
      }
      
    } else if [java_class] == "GCInspector.java" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => {"log_message" => "%{GCINSPECTOR_GC_TYPE:gc_type}[^\d]+%{GCINSPECTOR_GC_DURATION:gc_duration:float}[^\d]+%{GCINSPECTOR_GC_COLLECTIONS:gc_collections:float}[^\d]+%{GCINSPECTOR_GC_HEAP_USE:gc_heap_used:float}"}
        tag_on_failure => ["tags", "gcinspector_grok_parse_failure"]
      }
      
    } else if [stage] =~ /(\[CompactionExecutor:)\d+/ {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => {"log_message" => "%{COMPACTION_STATS}"}
        match => {"log_message" => "%{COMPACT_USED_SSTABLES:compacted_sstables}"}
        match => {"log_message" => "%{COMPACT_LARGE_ROW}"}
        match => {"log_message" => "%{COMPACT_SAVED_KEYCACHE}"}
        match => {"log_message" => "%{COMPACT_ENQUEUE_FLUSH}"}
        tag_on_failure => ["compact_grok_parse_failure"]
      }
      
      mutate {
        gsub => [
          "compact_sstable_count",    ",", "",
          "bytes_before_compact",     ",", "",
          "bytes_after_compact",      ",", "",
          "compact_duration_ms",      ",", "",
          "partition_before_compact", ",", "",
          "partition_after_compact",  ",", "",
          "compact_partition_merge",  ",", "",
          "compacted_sstables",       "(('\), SSTableReader\(path=')|(, SSTableReader\(path=&#39;))", " "
        ]
      }
      
      mutate {
        convert => [
          "compact_throughput_mb_per_sec", "float",
          "compact_sstable_count", "float",
          "bytes_before_compact", "float",
          "bytes_after_compact", "float",
          "compact_duration_ms", "float",
          "partition_before_compact", "float",
          "partition_after_compact", "float",
          "compact_partition_merge", "float",
          "large_row_compacted_bytes", "float",
          "saved_keycache_items", "float",
          "saved_keycache_duration", "float",
          "enqueue_serial_bytes", "float",
          "enqueue_live_bytes", "float",
          "enqueue_ops", "float"
        ]
      }
      
    } else if [java_class] == "MessagingService.java" and [stage] != "[main]" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => {"log_message" => "%{DROPPED_MESSAGE_COUNT:drop_message_count:float}\s+%{DROPPED_MESSAGE_TYPE:drop_message_type}.+[^\d+]%{DROPPED_MESSAGE_DURATION:drop_message_duration::float}"}
        tag_on_failure => ["dropped_message_grok_parse_failure"]
      }
    }
    
    date {
      match => ["log_stamp","yyyy-MM-dd HH:mm:ss,SSS"]
    }
  }
  
  if [type] == "cassandra_gc" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => {"message" => "%{TIMESTAMP_ISO8601:log_stamp}: (?<log_message>(.+\n?)+)"}
    }
    
    date {
      match => ["log_stamp","ISO8601"]
    }
    
    if "multiline" in [tags] {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => {"log_message" => "%{G1_HEAP_BEFORE_GC}"}
        match => {"log_message" => "%{CMS_HEAP_BEFORE_GC}"}
        match => {"log_message" => "%{G1_GC_STATS}"}
        match => {"log_message" => "%{CMS_STATS}"}
        match => {"log_message" => "%{G1_CM_CLEANUP_STATS}"}
        match => {"log_message" => "%{G1_CM_REMARK_STATS}"}
        match => {"log_message" => "%{G1_REQU_CYCLE_INITIATION_TIME}"}
        match => {"log_message" => "%{G1_FULL_GC}"}
        tag_on_failure => ["gc_grok_parse_failure"]
      }
      
    } else {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => {"log_message" => "%{GC_APPLI_STOPPED_SEC:appli_stopped_sec}"}
        match => {"log_message" => "%{GC_APPLI_CONCUR_SEC:appli_concurrent_sec}"}
        match => {"log_message" => "%{CMS_INITIAL_MARK}"}
        match => {"log_message" => "%{CMS_FINAL_REMARK}"}
        match => {"log_message" => "%{CMS_STAGE_WITH_DURATION}"}
        match => {"log_message" => "%{CMS_STAGE:cms_stage}"}
	    match => {"log_message" => "%{G1_CM_STAGE_WITH_DURATION}"}
        match => {"log_message" => "%{G1_CM_STAGE}"}
        tag_on_failure => ["gc_grok_parse_failure"]
	  }
    }

    if [gc_pool] in ["mixed","young"] { 
      mutate {
        convert => [
          "g1_ref_enq", "float",
          "g1_scan_rs.avg", "float",
          "g1_scan_rs.diff", "float",
          "g1_scan_rs.max", "float",
          "g1_scan_rs.min", "float",
          "g1_scan_rs.sum", "float",
          "g1_termination.avg", "float",
          "g1_termination.diff", "float",
          "g1_termination.max", "float",
          "g1_termination.min", "float",
          "g1_termination.sum", "float",
          "g1_update_rs.avg", "float",
          "g1_update_rs.diff", "float",
          "g1_update_rs.max", "float",
          "g1_update_rs.min", "float",
          "g1_update_rs.sum", "float",
          "g1_worker_end.avg", "float",
          "g1_worker_end.diff", "float",
          "g1_worker_end.max", "float",
          "g1_worker_end.min", "float",
          "g1_worker_other.avg", "float",
          "g1_worker_other.diff", "float",
          "g1_worker_other.max", "float",
          "g1_worker_other.min", "float",
          "g1_worker_other.sum", "float",
          "g1_worker_start.avg", "float",
          "g1_worker_start.diff", "float",
          "g1_worker_start.max", "float",
          "g1_worker_start.min", "float",
          "g1_worker_total.avg", "float",
          "g1_worker_total.diff", "float",
          "g1_worker_total.max", "float",
          "g1_worker_total.min", "float",
          "g1_worker_total.sum", "float",
          "gc_workers", "float",
          "g1_choose_cset", "float",
          "g1_clear_ct", "float",
          "g1_code_root_fixup", "float",
          "g1_code_root_migration", "float",
          "g1_code_root_purge", "float",
          "g1_code_root_scan.avg", "float",
          "g1_code_root_scan.diff", "float",
          "g1_code_root_scan.max", "float",
          "g1_code_root_scan.min", "float",
          "g1_code_root_scan.sum", "float",
          "g1_ext_root_scan.avg", "float",
          "g1_ext_root_scan.diff", "float",
          "g1_ext_root_scan.max", "float",
          "g1_ext_root_scan.min", "float",
          "g1_ext_root_scan.sum", "float",
          "g1_ext_root_mark.min", "float",
          "g1_ext_root_mark.avg", "float",
          "g1_ext_root_mark.max", "float",
          "g1_ext_root_mark.diff", "float",
          "g1_satb_filter.min", "float",
          "g1_satb_filter.avg", "float",
          "g1_satb_filter.max", "float",
          "g1_satb_filter.diff", "float",
          "g1_satb_filter.sum", "float",
          "g1_free_cset", "float",
          "g1_object_copy.avg", "float",
          "g1_object_copy.diff", "float",
          "g1_object_copy.max", "float",
          "g1_object_copy.min", "float",
          "g1_object_copy.sum", "float",
          "g1_other_duration", "float",
          "gc_parallel_time", "float",
          "g1_update_rs.updated_process_buffer.avg", "float",
          "g1_update_rs.updated_process_buffer.diff", "float",
          "g1_update_rs.updated_process_buffer.max", "float",
          "g1_update_rs.updated_process_buffer.min", "float",
          "g1_update_rs.updated_process_buffer.sum", "float",
          "g1_redirty_cards", "float"
        ]
      }
      
      mutate {
        rename => [ 
          "g1_update_rs.min", "[g1_update_rs][min]",
          "g1_update_rs.avg", "[g1_update_rs][avg]",
          "g1_update_rs.max", "[g1_update_rs][max]",
          "g1_update_rs.diff", "[g1_update_rs][diff]",
          "g1_update_rs.sum", "[g1_update_rs][sum]",
          "g1_object_copy.avg", "[g1_object_copy][avg]",
          "g1_object_copy.diff", "[g1_object_copy][diff]",
          "g1_object_copy.max", "[g1_object_copy][max]",
          "g1_object_copy.min", "[g1_object_copy][min]",
          "g1_object_copy.sum", "[g1_object_copy][sum]",
          "g1_scan_rs.avg", "[g1_scan_rs][avg]",
          "g1_scan_rs.diff", "[g1_scan_rs][diff]",
          "g1_scan_rs.max", "[g1_scan_rs][max]",
          "g1_scan_rs.min", "[g1_scan_rs][min]",
          "g1_scan_rs.sum", "[g1_scan_rs][sum]",
          "g1_termination.avg", "[g1_termination][avg]",
          "g1_termination.diff", "[g1_termination][diff]",
          "g1_termination.max", "[g1_termination][max]",
          "g1_termination.min", "[g1_termination][min]",
          "g1_termination.sum", "[g1_termination][sum]",
          "g1_worker_end.avg", "[g1_worker_end][avg]",
          "g1_worker_end.diff", "[g1_worker_end][diff]",
          "g1_worker_end.max", "[g1_worker_end][max]",
          "g1_worker_end.min", "[g1_worker_end][min]",
          "g1_worker_other.avg", "[g1_worker_other][avg]",
          "g1_worker_other.diff", "[g1_worker_other][diff]",
          "g1_worker_other.max", "[g1_worker_other][max]",
          "g1_worker_other.min", "[g1_worker_other][min]",
          "g1_worker_other.sum", "[g1_worker_other][sum]",
          "g1_worker_start.avg", "[g1_worker_start][avg]",
          "g1_worker_start.diff", "[g1_worker_start][diff]",
          "g1_worker_start.max", "[g1_worker_start][max]",
          "g1_worker_start.min", "[g1_worker_start][min]",
          "g1_worker_total.avg", "[g1_worker_total][avg]",
          "g1_worker_total.diff", "[g1_worker_total][diff]",
          "g1_worker_total.max", "[g1_worker_total][max]",
          "g1_worker_total.min", "[g1_worker_total][min]",
          "g1_worker_total.sum", "[g1_worker_total][sum]",
          "g1_code_root_scan.avg", "[g1_code_root_scan][avg]",
          "g1_code_root_scan.diff", "[g1_code_root_scan][diff]",
          "g1_code_root_scan.max", "[g1_code_root_scan][max]",
          "g1_code_root_scan.min", "[g1_code_root_scan][min]",
          "g1_code_root_scan.sum", "[g1_code_root_scan][sum]",
          "g1_ext_root_scan.avg", "[g1_ext_root_scan][avg]",
          "g1_ext_root_scan.diff", "[g1_ext_root_scan][diff]",
          "g1_ext_root_scan.max", "[g1_ext_root_scan][max]",
          "g1_ext_root_scan.min", "[g1_ext_root_scan][min]",
          "g1_ext_root_scan.sum", "[g1_ext_root_scan][sum]",
          "g1_ext_root_mark.min", "[g1_ext_root_mark][min]",
          "g1_ext_root_mark.avg", "[g1_ext_root_mark][avg]",
          "g1_ext_root_mark.max", "[g1_ext_root_mark][max]",
          "g1_ext_root_mark.diff", "[g1_ext_root_mark][diff]",
          "g1_satb_filter.min", "[g1_satb_filter][min]",
          "g1_satb_filter.avg", "[g1_satb_filter][avg]",
          "g1_satb_filter.max", "[g1_satb_filter][max]",
          "g1_satb_filter.diff", "[g1_satb_filter][diff]",
          "g1_satb_filter.sum", "[g1_satb_filter][sum]",
          "g1_update_rs.updated_process_buffer.avg", "[g1_update_rs][updated_process_buffer][avg]",
          "g1_update_rs.updated_process_buffer.diff", "[g1_update_rs][updated_process_buffer][diff]",
          "g1_update_rs.updated_process_buffer.max", "[g1_update_rs][updated_process_buffer][max]",
          "g1_update_rs.updated_process_buffer.min", "[g1_update_rs][updated_process_buffer][min]",
          "g1_update_rs.updated_process_buffer.sum", "[g1_update_rs][updated_process_buffer][sum]"  
        ]
      }  

      # only for -XX:+PrintAdaptiveSizePolicy fields
	  if [g1_ergonomics_action] {
	    mutate {
          convert => [      
            "g1_choos_cset.pending_cards", "float",
            "g1_choos_cset.predict_base_time", "float",
            "g1_choos_cset.remain_time", "float",
            "g1_choos_cset.start_target_time", "float",
            "g1_choos_cset.add_eden_regions", "float",
            "g1_choos_cset.add_survivor_regions", "float",
            "g1_choos_cset.predict_young_time", "float",
            "g1_choos_cset.add_old_regions", "float",
            "g1_choos_cset.max_old_regions", "float",
            "g1_choos_cset.reclaimable_bytes", "float",
            "g1_choos_cset.reclaimable_percent", "float",
            "g1_choos_cset.reclaimable_threshold", "float",
            "g1_choos_cset.added_eden_regions", "float",
            "g1_choos_cset.added_survivor_regions", "float",
            "g1_choos_cset.added_old_regions", "float",
            "g1_choos_cset.predict_pause_time", "float",
            "g1_choos_cset.end_target_time", "float",
            "g1_reclaimable_bytes", "float",
            "g1_reclaimable_percent", "float",
            "g1_reclaimable_threshold", "float",
            "g1_reclaimable_old_regions", "float",
            "g1_occupancy", "float",
            "g1_allocation_request", "float",
            "g1_occupancy_threshold", "float",
            "g1_occupancy_threshold_percent", "float",
            "g1_recent_overhead", "float",
            "g1_overhead_threshold", "float",
            "g1_uncommitte", "float",
            "g1_calcu_expansion_amount", "float",
            "g1_calcu_expansion_percent", "float",
            "g1_uncommitted", "float",
            "g1_request_heap_expansion", "float",
            "g1_attempt_heap_expansion", "float"
          ]
        }
        
        mutate {
          rename => [
            "g1_choos_cset.finish_add_old_regions_reason", "[g1_choos_cset][finish_add_old_regions_reason]",
            "g1_choos_cset.pending_cards", "[g1_choos_cset][pending_cards]",
            "g1_choos_cset.predict_base_time", "[g1_choos_cset][predict_base_time]",
            "g1_choos_cset.remain_time", "[g1_choos_cset][remain_time]",
            "g1_choos_cset.start_target_time", "[g1_choos_cset][start_target_time]",
            "g1_choos_cset.add_eden_regions", "[g1_choos_cset][add_eden_regions]",
            "g1_choos_cset.add_survivor_regions", "[g1_choos_cset][add_survivor_regions]",
            "g1_choos_cset.predict_young_time", "[g1_choos_cset][predict_young_time]",
            "g1_choos_cset.add_old_regions", "[g1_choos_cset][add_old_regions]",
            "g1_choos_cset.max_old_regions", "[g1_choos_cset][max_old_regions]",
            "g1_choos_cset.reclaimable_bytes", "[g1_choos_cset][reclaimable_bytes]",
            "g1_choos_cset.reclaimable_percent", "[g1_choos_cset][reclaimable_percent]",
            "g1_choos_cset.reclaimable_threshold", "[g1_choos_cset][reclaimable_threshold]",
            "g1_choos_cset.added_eden_regions", "[g1_choos_cset][added_eden_regions]",
            "g1_choos_cset.added_survivor_regions", "[g1_choos_cset][added_survivor_regions]",
            "g1_choos_cset.added_old_regions", "[g1_choos_cset][added_old_regions]",
            "g1_choos_cset.predict_pause_time", "[g1_choos_cset][predict_pause_time]",
            "g1_choos_cset.end_target_time", "[g1_choos_cset][end_target_time]"
          ]
        } 
      }
      
      # If two, or more, "start events" have the same ID, only the first one is recorded, the others are discarded.       
      if [gc_pool] == "young" and [g1_mixed_gc_reason] == "candidate old regions available" {
        alter {
    	  add_tag => ["PartiallyYoungModeStart", "FullyYoungModeEnd"]
  		}
      }
      
      if [gc_pool] == "mixed" and [g1_mixed_gc_reason] == "reclaimable percentage not over threshold" {
    	alter {
    	  add_tag => ["PartiallyYoungModeEnd","FullyYoungModeStart"]
  		}
      }     

      elapsed {
        start_tag => "PartiallyYoungModeStart"
        end_tag => "PartiallyYoungModeEnd"
        unique_id_field => "host"
      }
      elapsed {
        start_tag => "FullyYoungModeStart"
        end_tag => "FullyYoungModeEnd"
        unique_id_field => "host"
      }  
    }
    
    # fields for GC, CMS and G1    
    mutate {
      convert => [
        "gc_duration", "float",
        "gc_user_duration", "float",
        "gc_sys_duration", "float",
        "gc_real_duration", "float",
		"gc_jvm_uptime", "float",
        "minor_gc_cpu_duration", "float",
        "heap_used_before_gc", "float",
        "heap_total_before_gc", "float",
        "heap_used_after_gc", "float",
        "heap_total_after_gc", "float",
        "minor_gc_duration", "float",
        "appli_concurrent_sec", "float",
        "appli_stopped_sec", "float",
        "gc_number", "integer",
        "gc_full_gc_number", "integer",
        "new_gen_total_before_gc", "float",
        "new_gen_total_after_gc", "float",
        "new_gen_total_after_gc1", "float",
        "new_gen_used_before_gc", "float",
        "new_gen_used_after_gc", "float",
        "new_gen_used_after_gc1", "float",
        "new_gen_region_count_before_gc", "float",
        "new_gen_region_count_after_gc", "float",
        "new_gen_region_size_before_gc", "float",
        "new_gen_region_size_after_gc", "float",        
        "eden_total_before_gc", "float",
        "eden_total_after_gc", "float",
        "eden_used_before_gc", "float",
        "eden_used_after_gc", "float",
        "act_survivor_total_before_gc", "float",
        "act_survivor_total_after_gc", "float",
        "act_survivor_used_before_gc", "integer",
        "act_survivor_used_after_gc", "integer",
        "inact_survivor_total_before_gc", "float",
        "inact_survivor_total_after_gc", "float",
        "inact_survivor_used_before_gc", "integer",
        "inact_survivor_used_after_gc", "integer",
        "survivor_total_before_gc", "float",
        "survivor_total_after_gc", "float",
        "survivor_used_before_gc", "float",
        "survivor_used_after_gc", "float",
        "survivor_region_count_before_gc", "float",
        "survivor_region_count_after_gc", "float",
        "survivor_region_size_before_gc", "float",
        "survivor_region_size_after_gc", "float",
        "old_gen_total_before_gc", "float",
        "old_gen_total_after_gc", "float",
        "old_gen_used_before_gc", "float",
        "old_gen_used_after_gc", "float",
        "meta_used_before_gc", "float",
        "meta_used_after_gc", "float",
        "meta_total_after_gc", "float",
        "meta_capacity_before_gc", "float",
        "meta_capacity_after_gc", "float",
        "meta_committed_before_gc", "float",
        "meta_committed_after_gc", "float",
        "meta_reserved_before_gc", "float",
        "meta_reserved_after_gc", "float",
        "class_used_before_gc", "float",
        "class_used_after_gc", "float",
        "class_capacity_before_gc", "float",
        "class_capacity_after_gc", "float",
        "class_committed_before_gc", "float",
        "class_committed_after_gc", "float",
        "class_reserved_before_gc", "float",
        "class_reserved_after_gc", "float",
        "old_gen_free_frag_before_gc", "float",
        "old_gen_free_frag_after_gc", "float",
        "old_gen_max_chunk_before_gc", "float",
        "old_gen_max_chunk_after_gc", "float",
        "old_gen_block_numbers_before_gc", "integer",
        "old_gen_block_numbers_after_gc", "integer",
        "old_gen_avg_block_size_before_gc", "float",
        "old_gen_avg_block_size_after_gc", "float",
        "old_gen_tree_height_before_gc", "integer",
        "old_gen_tree_height_after_gc", "integer",
        "desired_survivor_size", "float",
        "cur_threshold_size", "integer",
        "max_threshold_size", "integer",
        "cms_cpu_duration", "float"
      ]
    }
    
    # M is used more than 99,98 %
    if [survivor_used_after_gc_unit] {
      if [survivor_used_after_gc_unit] == "K" and [survivor_used_after_gc] != 0  {
        ruby {
          code => "event['survivor_used_after_gc'] = event['survivor_used_after_gc'] / 1024"   
        }
      } else if [survivor_used_after_gc_unit] == "B" and [survivor_used_after_gc] != 0 {  
        ruby {
          code => "event['survivor_used_after_gc'] = event['survivor_used_after_gc'] / 1024 / 1024"   
        }
      }
      if [survivor_used_before_gc_unit] == "K" and [survivor_used_before_gc] != 0  {
        ruby {
          code => "event['survivor_used_before_gc'] = event['survivor_used_before_gc'] / 1024"   
        }
      } else if [survivor_used_before_gc_unit] == "B" and [survivor_used_before_gc] != 0 {  
        ruby {
          code => "event['survivor_used_before_gc'] = event['survivor_used_before_gc'] / 1024 / 1024"   
        }
      }
    } 
    
    # M is used more than 99,98 %
    if [eden_used_before_gc_unit] {
       # eden_used_after_gc should always 0
      if [eden_used_before_gc_unit] == "K" and [eden_used_before_gc] != 0  {
        ruby {
          code => "event['eden_used_before_gc'] = event['eden_used_before_gc'] / 1024"   
        }
      } else if [eden_used_before_gc_unit] == "B" and [eden_used_before_gc] != 0 {  
        ruby {
          code => "event['eden_used_before_gc'] = event['eden_used_before_gc'] / 1024 / 1024"   
        }
      }
      if [eden_total_before_gc_unit] == "K" and [eden_total_before_gc] != 0  {
        ruby {
          code => "event['eden_total_before_gc'] = event['eden_total_before_gc'] / 1024"   
        }
      } else if [eden_total_before_gc_unit] == "B" and [eden_total_before_gc] != 0 {  
        ruby {
          code => "event['eden_total_before_gc'] = event['eden_total_before_gc'] / 1024 / 1024"   
        }
      }
      if [eden_total_after_gc_unit] == "K" and [eden_total_after_gc] != 0  {
        ruby {
          code => "event['eden_total_after_gc'] = event['eden_total_after_gc'] / 1024"   
        }
      } else if [eden_total_after_gc_unit] == "B" and [eden_total_after_gc] != 0 {  
        ruby {
          code => "event['eden_total_after_gc'] = event['eden_total_after_gc'] / 1024 / 1024"   
        }
      }
    }
    
    # M is used more than 99,98 %
    if [heap_used_before_gc_unit] {
      if [heap_used_before_gc_unit] == "K" and [heap_used_before_gc] != 0  {
        ruby {
          code => "event['heap_used_before_gc'] = event['heap_used_before_gc'] / 1024"   
        }
      } else if [heap_used_before_gc_unit] == "B" and [heap_used_before_gc] != 0 {  
        ruby {
          code => "event['heap_used_before_gc'] = event['heap_used_before_gc'] / 1024 / 1024"   
        }
      }
      if [heap_used_after_gc_unit] == "K" and [heap_used_after_gc] != 0  {
        ruby {
          code => "event['heap_used_after_gc'] = event['heap_used_after_gc'] / 1024"   
        }
      } else if [heap_used_after_gc_unit] == "B" and [heap_used_after_gc] != 0 {  
        ruby {
          code => "event['heap_used_after_gc'] = event['heap_used_after_gc'] / 1024 / 1024"   
        }
      } 
      if [heap_total_after_unit] == "K" and [heap_total_after_gc] != 0  {
        ruby {
          code => "event['heap_total_after_gc'] = event['heap_total_after_gc'] / 1024"   
        }
      } else if [heap_total_after_unit] == "B" and [heap_total_after_gc] != 0 {  
        ruby {
          code => "event['heap_total_after_gc'] = event['heap_total_after_gc'] / 1024 / 1024"   
        }
      }
    }

    # G1 only
    mutate {
      convert => [    
        "region_size_before_gc", "float",
        "region_size_after_gc", "float",
        "g1_ref_proc", "float",
        "g1_remark", "float"  
      ]
    }
    
    if [g1_gc_stage] == "GC remark" {
      ruby {
        code => "event['gc_duration'] = event['g1_ref_proc'] + event['g1_remark']" 
      }
    }  	 
  }
}